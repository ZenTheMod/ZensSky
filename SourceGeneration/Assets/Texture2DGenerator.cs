using Microsoft.CodeAnalysis;
using SourceGeneration.DataStructures;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using static SourceGeneration.SourceGeneration;

namespace SourceGeneration.Assets;

[Generator(LanguageNames.CSharp)]
public sealed class Texture2DGenerator : IIncrementalGenerator
{
    private const string Extension = ".png";

    private const string FileHeader = @$"    // <Auto-Generated/>

using ReLogic.Content;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Terraria.ModLoader;
using System;
using {ModName}.Core.DataStructures;

#pragma warning disable";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var textureFiles = context.AdditionalTextsProvider
            .Where(static p =>
                p.Path.EndsWith(Extension, StringComparison.OrdinalIgnoreCase) &&
                p.Path.Contains("Textures"))
            .Collect();

        context.RegisterSourceOutput(textureFiles, (context, images) =>
        {
            StringBuilder writer = new();

                // Group all textures by their path with our custom type.
            AliasedList<string, AdditionalText> groupedPaths = new(images, i =>
                Regex.Match(i.Path, @$"(?=({ModName}[\\/])).*?(?=[\\/]({Path.GetFileName(i.Path)})$)").Value);

            foreach ((HashSet<string> keys, List<AdditionalText> items) in groupedPaths)
            {
                string folder = keys.First();

                string outputPath = Regex.Match(folder, @"(?<=(Textures[\\/])).*").Value;

                writer.AppendLine(FileHeader);

                writer.Append(@$"
namespace {Regex.Replace(folder, @"[\\/]", ".")};

public static class Textures
{{");
                HashSet<string> arrays = [];

                foreach (AdditionalText texture in items)
                {
                    string name = CleanName(texture.Path);

                    if (!arrays.Add(name))
                        continue;

                    string assetPath = AssetPath(texture.Path);

                    string assetName = Capitalize(name);

                        // Handle texture arrays.
                    List<string> arrayPaths = [..items.Where(i => CleanName(i.Path) == name).Select(i => AssetPath(i.Path))];

                    if (arrayPaths.Count() > 1)
                    {
                            // Sort the array based on the numbers in the file name.
                        var sortedPaths = arrayPaths.OrderBy(
                            s => int.Parse(
                                string.Concat(Regex.Matches(Path.GetFileNameWithoutExtension(s), "[0-9]")
                                .OfType<Match>()
                                .Select(m => m.Groups[0].Value)
                                )));

                            // Arrays are a bit messy, unsure if this really works well.
                        writer.Append(@$"
    public static LazyAsset<Texture2D>[] {assetName} =
    [");

                        foreach (string subAssetPath in sortedPaths)
                            writer.Append(@$"
        new(""{subAssetPath}""),");

                        writer.AppendLine(@$"
    ];");

                        continue;
                    }

                    writer.AppendLine(@$"
    public static LazyAsset<Texture2D> {assetName} = new(""{assetPath}"");");
                }

                writer.Append(@$"}}");

                context.AddSource(outputPath + "Textures.cs", writer.ToString());

                writer.Clear();
            }
        });
    }
}
